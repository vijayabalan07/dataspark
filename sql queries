use second_project;
select * from salequantity_saleamount;
CREATE TABLE salequantity_saleamount AS
SELECT 
    p.product_name, 
    SUM(s.Quantity) AS Total_Sales,
    SUM(s.Quantity * p.Unit_Price_USD) AS Revenue_USD
FROM 
    second_project.sales AS s
JOIN 
    second_project.products AS p ON s.ProductKey = p.ProductKey
GROUP BY 
    p.product_name
ORDER BY 
    Total_Sales DESC;

#2)To find total sale quantity and sale amount in USD from every country 
CREATE TABLE salequantity_saleamountinUSD AS
SELECT 
    c.Country,
    SUM(s.Quantity) AS Total_Sales,
    SUM(s.Quantity * p.Unit_Price_USD) AS Total_Revenue_USD
FROM 
    second_project.sales AS s
JOIN 
    second_project.customers AS c ON s.CustomerKey = c.CustomerKey
JOIN 
    second_project.products AS p ON s.ProductKey = p.ProductKey
GROUP BY 
    c.Country
ORDER BY 
    Total_Sales DESC;
use second_project;
select * from salequantity_saleamountinUSD;
#3) To find products with zero sales 
create table zerosalesproducts as
SELECT 
    ProductKey, product_name, Brand, Category
FROM 
    second_project.products AS p
WHERE 
    p.ProductKey NOT IN (SELECT s.ProductKey FROM second_project.sales AS s);

select * from zerosalesproducts;

#4) To find number of orders with respect to purchase currency for all currencies
create table total_sales_currency as
SELECT 
    s.Currency_code,
    COUNT(s.Order_number) AS Total_Sales
FROM 
    second_project.sales AS s
GROUP BY 
    s.currency_code
ORDER BY 
    Total_Sales DESC;
select * from second_project.total_sales_currency


#5) To find the months in which there is highest business
create table high_busines_month as
SELECT 
    MONTH(s.order_date) AS Month,
    SUM(s.Quantity * p.Unit_Price_USD) AS Total_Revenue_USD
FROM 
    second_project.sales AS s
JOIN 
    second_project.products AS p ON s.ProductKey = p.ProductKey
GROUP BY 
    Month
ORDER BY 
    Month;



6) To find the profit gained on each order
create table profit_eachorder as
SELECT 
    s.Order_Number ,
    (s.Quantity * p.Unit_Price_USD) - (s.Quantity * p.Unit_cost_USD) AS Profit
FROM 
    second_project.sales AS s
JOIN 
    second_project.products AS p ON s.ProductKey = p.ProductKey;

select * from second_project.profit_eachorder;

#7) To find the stores with zero revenue/sales
create table store_zerorevenue as
SELECT 
    s.StoreKey, s.State
FROM 
    Stores s
LEFT JOIN 
    Sales sa ON s.StoreKey = sa.StoreKey
WHERE 
    sa.StoreKey IS NULL;
    
select * from store_zerorevenue;

#8) To find the whole business insights of each store(Profit, Revenue, no.of.orders, no.of.customers)
create table pro_revenue_orders_customer as
WITH SalesData AS (
    SELECT
        s.StoreKey,
        SUM(p.Unit_Price_USD * s.Quantity) AS TotalRevenue,
        SUM((p.Unit_Price_USD - p.Unit_cost_USD) * s.Quantity) AS TotalProfit,
        COUNT(DISTINCT s.CustomerKey) AS NumberOfCustomers,
        COUNT(s.Order_number) AS NumberOfOrders
    FROM
        sales s
    JOIN
        products p ON s.ProductKey = p.ProductKey
    GROUP BY
        s.StoreKey
)
SELECT
    s.StoreKey,
    TotalRevenue,
    TotalProfit,
    NumberOfCustomers,
    NumberOfOrders
FROM
    SalesData s
JOIN
    stores st ON s.StoreKey = st.StoreKey
ORDER BY
    TotalRevenue DESC;


#9) To find the revenue generated from each category
USE second_project;
create table profitbycategory as
SELECT
    pr.CategoryKey,
    SUM((pr.Unit_Price_USD - pr.Unit_cost_USD) * s.Quantity) AS ProfitUSD
FROM
    sales s
JOIN
    products pr ON s.ProductKey = pr.ProductKey
GROUP BY
    pr.CategoryKey
order by 
    ProfitUSD DESC;
create table revenuebycatogory as
SELECT
    pr.CategoryKey,
    SUM(pr.Unit_Price_USD * s.Quantity) AS RevenueUSD
FROM
    sales s
JOIN
    products pr ON s.ProductKey = pr.ProductKey
GROUP BY
    pr.CategoryKey
order by
    RevenueUSD DESC ;
    
select * from profitbycategory;
select * from  revenuebycatogory;
#10) To find the revenue generated from each sub category
USE second_project;

USE second_project;
create table  revenuebysubcatogory as
SELECT
    pr.SubcategoryKey,
    SUM(pr.Unit_Price_USD * s.Quantity) AS RevenueUSD
FROM
    sales s
JOIN
    products pr ON s.ProductKey = pr.ProductKey
GROUP BY
    pr.SubcategoryKey
ORDER BY
    RevenueUSD DESC;  -- Sorting by RevenueUSD in descending order
 create table  profitbysubcatogory as   


SELECT
    pr.SubcategoryKey,
    SUM((pr.Unit_Price_USD - pr.Unit_Cost_USD) * s.Quantity) AS ProfitUSD
FROM
    sales s
JOIN
    products pr ON s.ProductKey = pr.ProductKey
GROUP BY
    pr.SubcategoryKey
ORDER BY
    ProfitUSD DESC;  -- Sorting by ProfitUSD in descending order

select * from profitbysubcategory;
select * from  revenuebysubcatogory;
USE second_project;

#11) To find the total sales and revenue in every month from 2016 to 2021
create table total_sales_revenue_bymonth as
SELECT 
    DATE_FORMAT(s.order_date, '%Y-%m') AS Month,
    SUM(s.Quantity) AS Total_Sales,
    SUM(s.Quantity * p.Unit_Price_USD) AS Total_Revenue
FROM 
    second_project.sales AS s
JOIN 
    second_project.products AS p ON s.ProductKey = p.ProductKey
GROUP BY 
    Month
ORDER BY 
    Month;

#12) To find the customers purchasing frequency based on the no of orders
create table purchase_frequency_orders as
SELECT 
    c.CustomerKey,
    c.Name,
    COUNT(s.Order_number) AS Purchase_Frequency
FROM 
    second_project.sales AS s
JOIN 
    second_project.customers AS c ON s.CustomerKey = c.CustomerKey
GROUP BY 
    c.CustomerKey, c.Name
ORDER BY 
    Purchase_Frequency DESC;
#13) Customer segmentation based on number of orders ( categories: VIP , Loyal , Occassional )
create table no_of_ordersbycustomers
WITH CustomerOrders AS (
    SELECT 
        s.CustomerKey,  
        COUNT(s.Order_number) AS OrderCount
    FROM 
        second_project.sales s  
    GROUP BY 
        s.CustomerKey
)
SELECT 
    c.CustomerKey,  -- Corrected column name
    COALESCE(co.OrderCount, 0) AS OrderCount,
    CASE
        WHEN COALESCE(co.OrderCount, 0) > 10 THEN 'VIP Customer'
        WHEN COALESCE(co.OrderCount, 0) BETWEEN 5 AND 10 THEN 'Loyal Customer'
        WHEN COALESCE(co.OrderCount, 0) BETWEEN 1 AND 4 THEN 'Occasional Customer'
        ELSE 'No Orders'
    END AS CustomerOrderingType
FROM 
    second_project.customers c  -- Specify the correct schema name
LEFT JOIN
    CustomerOrders co ON c.CustomerKey = co.CustomerKey;  -- Corrected column name
